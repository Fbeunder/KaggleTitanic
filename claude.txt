# Projectoverzicht
De Titanic voorspeller is een applicatie die machine learning modellen gebruikt om te voorspellen welke passagiers de Titanic-ramp zouden overleven op basis van hun demografische en reisgegevens. Het doel is om verschillende voorspellingsmodellen te trainen en te evalueren met behulp van de Kaggle Titanic dataset, en gebruikers in staat te stellen deze modellen te vergelijken en feature engineering toe te passen via een web interface.

# Architectuur
De applicatie wordt opgedeeld in de volgende modules:

1. **Data Processing**: Modules voor het laden, verwerken en transformeren van de data
2. **Modelling**: Modules voor het trainen en evalueren van verschillende machine learning modellen
3. **Feature Engineering**: Modules voor het creëren en selecteren van features
4. **Web Interface**: Modules voor de web interface waarmee gebruikers kunnen interacteren met de modellen
5. **Utilities**: Hulpmodules voor algemene functionaliteiten

# Modules

## 1. Data Processing

### data_loader.py
- **Status**: Volledige implementatie aanwezig
- **Functionaliteit**: 
  - Laden van de train.csv en test.csv datasets
  - Error handling voor missing files, empty files en parsing errors
  - Combineren van train en test data voor consistente preprocessing
- **Afhankelijkheid**: Utilities/config.py

### data_preprocessor.py
- **Status**: Volledige implementatie aanwezig
- **Functionaliteit**: 
  - Verwerken en opschonen van de data
  - Missing value imputation
  - Feature encoding voor categorische variabelen
  - Feature scaling voor numerieke variabelen
  - Feature engineering zoals title extraction en family features
- **Afhankelijkheid**: data_loader.py

## 2. Modelling

### model_factory.py
- **Status**: Volledige implementatie aanwezig
- **Functionaliteit**: 
  - Factory pattern implementatie voor het creëren van verschillende machine learning modellen
  - Gestandaardiseerde interface voor alle model types
  - Ondersteuning voor 6 verschillende algoritmes:
    - Logistic Regression
    - Random Forest
    - Decision Tree
    - Support Vector Machine (SVM)
    - K-Nearest Neighbors (KNN)
    - Gradient Boosting
  - Hyperparameter tuning functionaliteit
  - Feature importance extractie
  - Mogelijkheid om nieuwe model types te registreren
- **Afhankelijkheid**: Geen

### model_trainer.py
- **Status**: Volledige implementatie aanwezig
- **Functionaliteit**: 
  - Trainen van modellen met gestandaardiseerde interface
  - Cross-validatie voor model evaluatie
  - Train-test-validation data splitsing
  - Hyperparameter tuning via GridSearchCV
  - Trainen van meerdere modellen tegelijkertijd
  - Opslaan en bijhouden van getrainde modellen
- **Afhankelijkheid**: model_factory.py, data_preprocessor.py

### model_evaluator.py
- **Status**: Volledige implementatie aanwezig
- **Functionaliteit**: 
  - Evalueren van modellen op verschillende metrics
  - Berekenen van accuracy, precision, recall, F1, AUC en andere metrics
  - Genereren van confusion matrices
  - Plotten van ROC curves
  - Vergelijken van verschillende modellen
  - Visualisatie van model performance
- **Afhankelijkheid**: model_trainer.py

## 3. Feature Engineering

### feature_creator.py
- **Status**: Volledige implementatie aanwezig (PR #10)
- **Functionaliteit**: 
  - Verantwoordelijk voor het creëren van nieuwe features op basis van bestaande features
  - Extraheren van titels uit namen en categoriseren
  - Creëren van family size en family type features
  - Extraheren van cabin deck en location informatie
  - Categoriseren van leeftijden
  - Categoriseren van ticketprijzen
  - Creëren van feature interacties en combinaties
  - Convenience methode om alle features in één keer te creëren
- **Afhankelijkheid**: data_preprocessor.py

### feature_selector.py
- **Status**: Volledige implementatie aanwezig (PR #10)
- **Functionaliteit**: 
  - Verantwoordelijk voor feature selectie en importance ranking
  - Selecteren van features met statistische tests (SelectKBest)
  - Selecteren van features met recursieve feature eliminatie (RFE)
  - Automatische selectie van optimaal aantal features (RFECV)
  - Berekenen van feature importance met verschillende methoden
  - Visualiseren van feature importance
  - Detecteren en verwijderen van hoog gecorreleerde features
  - Zoeken naar optimale feature subset
- **Afhankelijkheid**: feature_creator.py, model_trainer.py

## 4. Web Interface

### app.py
- **Status**: Volledige implementatie aanwezig (PR #12)
- **Functionaliteit**: 
  - Hoofdmodule voor de Flask webapplicatie
  - Routering voor alle pagina's (/, /features, /train, /predict, /results)
  - API endpoints voor modelgegevens en voorspellingen
  - API endpoints voor Kaggle submissions
  - Error handling voor 404 en 500 fouten
  - Integratie met alle model en data componenten
- **Afhankelijkheid**: Alle andere modules

### model_interface.py
- **Status**: Volledige implementatie aanwezig (PR #12)
- **Functionaliteit**: 
  - Interface tussen web app en modellen
  - Laden en voorbereiden van data
  - Trainen van modellen met hyperparameter tuning
  - Voorspellen van overlevingskansen
  - Ophalen van model performance metrics
  - Feature importance visualisatie
  - Opslaan en laden van getrainde modellen
  - Genereren en beheren van Kaggle submissions
  - Vergelijken van modellen en submissions
- **Afhankelijkheid**: data_loader.py, data_preprocessor.py, alle model modules, feature_creator.py, feature_selector.py, submission_generator.py

### dashboard.py
- **Status**: Basisimplementatie aanwezig (PR #12)
- **Functionaliteit**: 
  - Creëren van visualisaties voor data en model performance
  - Layout voor data exploration dashboard
  - Interactieve plots voor feature analyse
- **Afhankelijkheid**: data_loader.py, model_evaluator.py

### Templates
- **Status**: Volledige implementatie aanwezig (PR #12)
- **Functionaliteit**:
  - base.html: Basis template met layout, navigatie en gemeenschappelijke elementen
  - index.html: Homepage met uitleg en navigatie
  - features.html: Feature exploration pagina met visualisaties
  - train.html: Model training pagina met model selectie en parameter configuratie
  - predict.html: Voorspellingspagina met invoerformulier voor passagiergegevens
  - results.html: Resultaatpagina met model vergelijkingen en submission export
  - 404.html en 500.html: Error pagina's
- **Afhankelijkheid**: Geen

### Static Files
- **Status**: Volledige implementatie aanwezig (PR #12)
- **Functionaliteit**:
  - CSS styling voor een consistent en gebruiksvriendelijk design
  - JavaScript voor interactieve elementen en visualisaties
- **Afhankelijkheid**: Geen

## 5. Utilities

### config.py
- **Status**: Basisimplementatie aanwezig
- **Functionaliteit**: Configuratie-instellingen voor de applicatie
- **Afhankelijkheid**: Geen

### utils.py
- **Status**: Basisimplementatie aanwezig
- **Functionaliteit**: Algemene hulpfuncties die door meerdere modules gebruikt kunnen worden
- **Afhankelijkheid**: Geen

### submission_generator.py
- **Status**: Volledige implementatie aanwezig (PR #13)
- **Functionaliteit**: 
  - Genereren van submission files in het juiste formaat voor Kaggle
  - Valideren van submissions volgens Kaggle requirements
  - Vergelijken van verschillende model submissions
  - Visualiseren van predictie distributies
  - Exporteren en downloaden van submission bestanden
  - Beheren van submission geschiedenis en metadata
- **Afhankelijkheid**: model_evaluator.py, data_loader.py

## 6. Notebooks

### titanic_eda.ipynb
- **Status**: Volledige implementatie aanwezig
- **Functionaliteit**: Notebook voor Exploratory Data Analysis (EDA) van de Titanic dataset
- **Afhankelijkheid**: data_loader.py

### model_factory_demo.ipynb
- **Status**: Volledige implementatie aanwezig
- **Functionaliteit**: Demonstratie notebook voor het gebruik van de ModelFactory module
- **Afhankelijkheid**: data_loader.py, data_preprocessor.py, model_factory.py
